# -*- coding: utf-8 -*-
"""T-Balance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ih0PeM3XxG0iSYcxhu6-wstar8DY_iqB
"""

# Импорт необходимых библиотек
import re
from sympy import Matrix, lcm

# Создание списка реагентов и списка матрицы элементов
elementList = []
elementMatrix = []

# Запрос пользователю на ввод реагентов и продуктов
print("Введите реагенты. Регистр имеет значение.")
reactants = input("Реагенты: ")
print("Введите продукты. Регистр имеет значение.")
products = input("Продукты: ")

# Удаление пробелов и разбиение на список
reactants = reactants.replace(' ', '').split("+")
products = products.replace(' ', '').split("+")

# Функция для добавления элементов в матрицу
def addToMatrix(element, index, count, side):
    # Добавляем новую строку, если ее нет
    if index == len(elementMatrix):
        elementMatrix.append([])
        for x in elementList:
            elementMatrix[index].append(0)
    # Добавляем новый элемент, если его нет
    if element not in elementList:
        elementList.append(element)
        for i in range(len(elementMatrix)):
            elementMatrix[i].append(0)
    # Добавляем количество элементов в матрицу
    column = elementList.index(element)
    elementMatrix[index][column] += count * side

# Функция для поиска элементов в соединении
def findElements(segment, index, multiplier, side):
    elementsAndNumbers = re.split('([A-Z][a-z]?)', segment)
    i = 0
    while i < len(elementsAndNumbers)-1: # последний элемент всегда пустой
        i += 1
        if len(elementsAndNumbers[i]) > 0:
            if elementsAndNumbers[i+1].isdigit():
                count = int(elementsAndNumbers[i+1]) * multiplier
                addToMatrix(elementsAndNumbers[i], index, count, side)
                i += 1
            else:
                addToMatrix(elementsAndNumbers[i], index, multiplier, side)

# Функция для разбора соединения
def compoundDecipher(compound, index, side):
    segments = re.split('(\([A-Za-z0-9]*\)[0-9]*)', compound)
    for segment in segments:
        if segment.startswith("("):
            segment = re.split('\)([0-9]*)', segment)
            multiplier = int(segment[1])
            segment = segment[0][1:]
        else:
            multiplier = 1
        findElements(segment, index, multiplier, side)

# Обработка реагентов
for i in range(len(reactants)):
    compoundDecipher(reactants[i], i, 1)

# Обработка продуктов
for i in range(len(products)):
    compoundDecipher(products[i], i+len(reactants), -1)

# Создание и транспонирование матрицы
elementMatrix = Matrix(elementMatrix)
elementMatrix = elementMatrix.transpose()

# Решение матрицы и умножение на НОК
solution = elementMatrix.nullspace()[0]
multiple = lcm([val.q for val in solution])
solution = multiple * solution

# Коэффициенты веществ
coEffi = solution.tolist()

# Формирование результатов
output = ""
for i in range(len(reactants)):
    output += str(coEffi[i][0]) + reactants[i]
    if i < len(reactants)-1:
        output += " + "
output += " -> "
for i in range(len(products)):
    output += str(coEffi[i+len(reactants)][0]) + products[i]
    if i < len(products)-1:
        output += " + "
output2 = ""
for i in range(len(output)):
  if output[i] != '1':
   output2 += output[i]
  elif output[i] == '1' and output[i+1].isdigit() == False and (output[i-2] == '+' or output[i-2] == '=' or output[i-2] == '>'):
    pass
  else:
    output2 += output[i]
print(output2)